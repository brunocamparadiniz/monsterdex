{"ast":null,"code":"import _slicedToArray from\"/Users/brunocamparadiniz/Desktop/coding/ZTM-REACT/projects/monsters/monsterdex/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";// import { Component } from \"react\";\nimport{useState,useEffect}from\"react\";import\"./App.css\";import CardList from\"./components/card-list/card-list\";import SearchBox from\"./components/search-box/search-box\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var App=function App(){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),searchField=_useState2[0],setSearchField=_useState2[1];//[value, setValue]\nvar _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),monsters=_useState4[0],setMonsters=_useState4[1];var _useState5=useState(monsters),_useState6=_slicedToArray(_useState5,2),filteredMonsters=_useState6[0],setFilteredMonsters=_useState6[1];useEffect(function(){fetch(\"https://jsonplaceholder.typicode.com/users\").then(function(response){return response.json();}).then(function(users){return setMonsters(users);});},[]);useEffect(function(){var newFilteredMonsters=monsters.filter(function(monster){return monster.name.toLocaleLowerCase().includes(searchField);});setFilteredMonsters(newFilteredMonsters);},[monsters,searchField]);var onSearchChange=function onSearchChange(e){var searchFieldString=e.target.value.toLocaleLowerCase();setSearchField(searchFieldString);};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"app-title\",children:\"Monsters Rolodex\"}),/*#__PURE__*/_jsx(SearchBox,{onChangeHandler:onSearchChange,placeholder:'search monsters',className:\"monsters-search-box\"}),/*#__PURE__*/_jsx(CardList,{monsters:filteredMonsters})]});};//--------------------- CLASS\n// class App extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       monsters: [],\n//       searchField: \"\",\n//     };\n//   }\n//   // didMount is the first time a component gets placed into the DOM (first time REACT renders a component into the page) -> it only happens once!\n//   // this is the moment when you wanna make the API request\n//   componentDidMount() {\n//     fetch(\"https://jsonplaceholder.typicode.com/users\")\n//       .then((response) => response.json())\n//       .then((users) =>\n//         this.setState(() => {\n//           return { monsters: users };\n//         })\n//       );\n//   }\n//   onSearchChange = (e) => {\n//     const searchField = e.target.value.toLocaleLowerCase();\n//     this.setState(() => {\n//       return { searchField };\n//     });\n//   }\n//   render() {\n//     const { monsters, searchField } = this.state\n//     const { onSearchChange } = this\n//     const filteredMonsters = monsters.filter((monster) => {\n//       return monster.name.toLocaleLowerCase().includes(searchField);\n//     });\n//     return (\n//       <div className=\"App\">\n//         <h1 className=\"app-title\">Monsters Rolodex</h1>\n//         <SearchBox onChangeHandler={onSearchChange} placeholder={'search monsters'} className='monsters-search-box' />\n//         <CardList monsters={filteredMonsters}/>\n//       </div>\n//     );\n//   }\n// }\nexport default App;","map":{"version":3,"names":["useState","useEffect","CardList","SearchBox","App","searchField","setSearchField","monsters","setMonsters","filteredMonsters","setFilteredMonsters","fetch","then","response","json","users","newFilteredMonsters","filter","monster","name","toLocaleLowerCase","includes","onSearchChange","e","searchFieldString","target","value"],"sources":["/Users/brunocamparadiniz/Desktop/coding/ZTM-REACT/projects/monsters/monsterdex/src/App.js"],"sourcesContent":["// import { Component } from \"react\";\nimport { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport CardList from \"./components/card-list/card-list\";\nimport SearchBox from \"./components/search-box/search-box\";\n\nconst App = () => {\n\n  const [searchField, setSearchField] = useState('') //[value, setValue]\n  const [monsters, setMonsters] = useState([])\n  const [filteredMonsters, setFilteredMonsters] =useState(monsters)\n\n  useEffect(() => {  \n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => setMonsters(users))\n  }, [])\n\n  useEffect(() => {\n    const newFilteredMonsters = monsters.filter((monster) => {\n      return monster.name.toLocaleLowerCase().includes(searchField);\n    });\n    setFilteredMonsters(newFilteredMonsters)\n  }, [monsters, searchField])\n\n  const onSearchChange = (e) => {\n    const searchFieldString = e.target.value.toLocaleLowerCase()\n    setSearchField(searchFieldString)\n  }\n\n\n  return (\n  <div className=\"App\">\n\n    <h1 className=\"app-title\">Monsters Rolodex</h1>\n  \n    <SearchBox \n      onChangeHandler={onSearchChange} \n      placeholder={'search monsters'} \n      className='monsters-search-box' />\n    <CardList monsters={filteredMonsters}/>\n  </div>)\n}\n\n//--------------------- CLASS\n\n// class App extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       monsters: [],\n//       searchField: \"\",\n//     };\n//   }\n//   // didMount is the first time a component gets placed into the DOM (first time REACT renders a component into the page) -> it only happens once!\n//   // this is the moment when you wanna make the API request\n//   componentDidMount() {\n//     fetch(\"https://jsonplaceholder.typicode.com/users\")\n//       .then((response) => response.json())\n//       .then((users) =>\n//         this.setState(() => {\n//           return { monsters: users };\n//         })\n//       );\n//   }\n\n//   onSearchChange = (e) => {\n//     const searchField = e.target.value.toLocaleLowerCase();\n//     this.setState(() => {\n//       return { searchField };\n//     });\n//   }\n\n//   render() {\n\n//     const { monsters, searchField } = this.state\n//     const { onSearchChange } = this\n\n//     const filteredMonsters = monsters.filter((monster) => {\n//       return monster.name.toLocaleLowerCase().includes(searchField);\n//     });\n\n//     return (\n//       <div className=\"App\">\n\n//         <h1 className=\"app-title\">Monsters Rolodex</h1>\n        \n//         <SearchBox onChangeHandler={onSearchChange} placeholder={'search monsters'} className='monsters-search-box' />\n//         <CardList monsters={filteredMonsters}/>\n//       </div>\n//     );\n//   }\n// }\n\nexport default App;\n"],"mappings":"oKAAA;AACA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC3C,MAAO,WAAW,CAClB,MAAOC,SAAQ,KAAM,kCAAkC,CACvD,MAAOC,UAAS,KAAM,oCAAoC,CAAC,wFAE3D,GAAMC,IAAG,CAAG,QAANA,IAAG,EAAS,CAEhB,cAAsCJ,QAAQ,CAAC,EAAE,CAAC,wCAA3CK,WAAW,eAAEC,cAAc,eAAiB;AACnD,eAAgCN,QAAQ,CAAC,EAAE,CAAC,yCAArCO,QAAQ,eAAEC,WAAW,eAC5B,eAA+CR,QAAQ,CAACO,QAAQ,CAAC,yCAA1DE,gBAAgB,eAAEC,mBAAmB,eAE5CT,SAAS,CAAC,UAAM,CACdU,KAAK,CAAC,4CAA4C,CAAC,CAChDC,IAAI,CAAC,SAACC,QAAQ,QAAKA,SAAQ,CAACC,IAAI,EAAE,GAAC,CACnCF,IAAI,CAAC,SAACG,KAAK,QAAKP,YAAW,CAACO,KAAK,CAAC,GAAC,CACxC,CAAC,CAAE,EAAE,CAAC,CAENd,SAAS,CAAC,UAAM,CACd,GAAMe,oBAAmB,CAAGT,QAAQ,CAACU,MAAM,CAAC,SAACC,OAAO,CAAK,CACvD,MAAOA,QAAO,CAACC,IAAI,CAACC,iBAAiB,EAAE,CAACC,QAAQ,CAAChB,WAAW,CAAC,CAC/D,CAAC,CAAC,CACFK,mBAAmB,CAACM,mBAAmB,CAAC,CAC1C,CAAC,CAAE,CAACT,QAAQ,CAAEF,WAAW,CAAC,CAAC,CAE3B,GAAMiB,eAAc,CAAG,QAAjBA,eAAc,CAAIC,CAAC,CAAK,CAC5B,GAAMC,kBAAiB,CAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAACN,iBAAiB,EAAE,CAC5Dd,cAAc,CAACkB,iBAAiB,CAAC,CACnC,CAAC,CAGD,mBACA,aAAK,SAAS,CAAC,KAAK,wBAElB,WAAI,SAAS,CAAC,WAAW,UAAC,kBAAgB,EAAK,cAE/C,KAAC,SAAS,EACR,eAAe,CAAEF,cAAe,CAChC,WAAW,CAAE,iBAAkB,CAC/B,SAAS,CAAC,qBAAqB,EAAG,cACpC,KAAC,QAAQ,EAAC,QAAQ,CAAEb,gBAAiB,EAAE,GACnC,CACR,CAAC,CAED;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,cAAeL,IAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}